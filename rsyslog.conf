#  Default logging rules can be found in /etc/rsyslog.d/50-default.conf


#################
#### MODULES ####
#################

module(load="imuxsock") # provides support for local system logging
# module(load="imklog")   # provides kernel logging support
module(load="immark")  # provides --MARK-- message capability
# $ModLoad imuxsock # provides support for local system logging
# $ModLoad imklog   # provides kernel logging support (previously done by rklogd)
#$ModLoad immark  # provides --MARK-- message capability

# provides UDP syslog reception
# $ModLoad imudp
# $UDPServerRun 514

# provides TCP syslog reception
# $ModLoad imtcp
# $InputTCPServerRun 514
module(load="builtin:omfile")
module(load="mmnormalize") # parser using liblognorm
module(load="mmjsonparse") #for parsing CEE-enhanced syslog messages
module(load="imfile")
module(load="mmdblookup" container="!src_geo")

###########################
#### GLOBAL DIRECTIVES ####
###########################

#
# Use traditional timestamp format.
# To enable high precision timestamps, comment out the following line.
#
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# Filter duplicated messages
$RepeatedMsgReduction on

#
# Set the default permissions for all log files.
#
$FileOwner root
$FileGroup root
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022
$PrivDropToUser syslog
$PrivDropToGroup syslog

# General globals
global(net.enableDNS="off")

# Remove Control Chars
global(parser.escapeControlCharactersOnReceive="off" )

#
# Where to place spool files
#
$WorkDirectory /var/spool/rsyslog

global(workDirectory="/var/spool/rsyslog")
#
# Include all config files in /etc/rsyslog.d/
#
# $IncludeConfig /etc/rsyslog.d/*.conf



#################
#### Inputs  ####
#################


# provides UDP syslog reception
module(load="imudp")
input(type="imudp" port="514")

# provides TCP syslog reception
module(load="imtcp")
input(type="imtcp" port="514" )

# File 1
input(type="imfile"
      File="/opt/input-geo.json"
      Tag="geoip"
      PersistStateInterval="1"
      freshStartTail="off")

#################
### Templates ###
#################

# this is for formatting our syslog in JSON with @timestamp for Json messages
template(name="geoip"
  type="list") {
    constant(value="{")
      constant(value="\"@version\":\"1")
      constant(value="\",\"@timestamp\":\"")		property(name="timegenerated" dateFormat="rfc3339")
      constant(value="\",\"host\":\"")			    property(name="hostname") 
      constant(value="\",\"type\":\"syslog")
      constant(value="\",\"syslog_timestamp\":\"")	property(name="timereported" dateFormat="rfc3164"  format="json")
      constant(value="\",\"syslog_hostname\":\"")	property(name="hostname" format="json")
      constant(value="\",\"syslog_program\":\"")	property(name="programname" format="json")
      constant(value="\",\"syslog_message\":\"")	property(name="msg" format="json")
      constant(value="\",\"received_at\":\"")		property(name="timegenerated" dateFormat="rfc3339")
      constant(value="\",\"received_from\":\"")	    property(name="fromhost" format="json")
      constant(value="\",\"path\":\"")      	    property(name="$!metadata!filename")
      constant(value="\",\"name\":\"")              property(name="$!name" format="json")
      constant(value="\",\"src_ip\":\"")            property(name="$!src_ip" format="json")
      constant(value="\",\"src_geoip\":{")          property(name="$!src_geo" position.from="2")
      constant(value="}\n")
}


#################
#### Actions ####
#################


###Fix text to utf8, disabled for now
###action(type="mmutf8fix")

#action(type="omfile" file="/tmp/logtesting" template="RSYSLOG_DebugFormat")


if ($syslogtag contains 'geoip') then {
    
    
    action(type="mmjsonparse" cookie="")
    
    if $parsesuccess == "OK" then {

        # https://github.com/rsyslog/rsyslog/issues/1650

        # Add MaxMind/GeoIP DB lookup information
        action( type="mmdblookup" mmdbfile="/etc/rsyslog.d/GeoLite2-City.mmdb" key="!src_ip" 
                fields=[":timezone:!location!time_zone",
                        ":latitude:!location!latitude",
                        ":longitude:!location!longitude",
                        ":dma_code:!location!metro_code",
                        ":city_name:!names!en",
                        ":continent_code:!continent!code",
                        ":country_code2:!country!iso_code",
                        ":country_code3:!country!iso_code",
                        ":country_name:!country!names!en",
                        ":postal_code:!postal!code",
                        ":region_code:!subdivisions!iso_code",
                        ":region_name:!subdivisions!names!en"
                        ]
        )

        # Add MaxMind/GeoIP ISP DB lookup information
       # action( type="mmdblookup" mmdbfile="/etc/rsyslog.d/GeoIP2-ISP.mmdb" key="!src_ip" 
       #         fields=[":asn:!autonomous_system_number",
       #                 ":as_org:!autonomous_system_organization",
       #                 "!isp",
       #                 "!organization"
       #                 ]
       # )
        
        # Add IP to src_geo object
        set $!src_geo!ip = $!src_ip;

        # If geolocation was successful, add lat,lon in a special location object
        if $! contains 'latitude' then {
            set $!src_geo!location!lat = $!src_geo!latitude;
            set $!src_geo!location!lon = $!src_geo!longitude;
        }

        # Output to a new file
        action(type="omfile" File="/tmp/json-output" template="geoip")

        # Output to Elasticsearch
       # action(type="omelasticsearch"
       #     server="192.168.1.10"
       #     serverport="9200"
       #     template="geoip"  
       #     searchIndex="geoindex"
       #     dynSearchIndex="on"
       #     searchType="syslog"
       #     bulkmode="on"                   # use the Bulk API
       #     queue.dequeuebatchsize="5000"   # ES bulk size
       #     queue.size="100000"   # capacity of the action queue
       #     queue.workerthreads="5"   # 5 workers for the action
       #     action.resumeretrycount="-1"  # retry indefinitely if ES is unreachable
       #     errorfile="/var/log/omelasticsearch.log"
       # )

    } else if $parsesuccess == "FAIL" then {
        action(type="omfile" File="/tmp/json-parse-failure")
    }
}
